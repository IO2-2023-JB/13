/*
 * VideIO API
 *
 * VideIO project API specification.
 *
 * The version of the OpenAPI document: 1.0.6
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using WideIO.API.Converters;

namespace MyWideIO.API.Models.Dto_Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CommentDto : IEquatable<CommentDto>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets AuthorId
        /// </summary>
        [DataMember(Name="authorId", EmitDefaultValue=false)]
        public Guid AuthorId { get; set; }

        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        /// <example>&quot;This is an example comment.&quot;</example>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Gets or Sets AvatarImage
        /// </summary>
        /// <example>&quot;https://example.com/avatar/user-id&quot;</example>
        [DataMember(Name="avatarImage", EmitDefaultValue=false)]
        public string? AvatarImage { get; set; }

        /// <summary>
        /// Gets or Sets Nickname
        /// </summary>
        /// <example>&quot;johnny123&quot;</example>
        [DataMember(Name="nickname", EmitDefaultValue=false)]
        public string Nickname { get; set; }

        /// <summary>
        /// Gets or Sets HasResponses
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="hasResponses", EmitDefaultValue=true)]
        public bool HasResponses { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommentDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  AuthorId: ").Append(AuthorId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  AvatarImage: ").Append(AvatarImage).Append("\n");
            sb.Append("  Nickname: ").Append(Nickname).Append("\n");
            sb.Append("  HasResponses: ").Append(HasResponses).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CommentDto)obj);
        }

        /// <summary>
        /// Returns true if CommentDto instances are equal
        /// </summary>
        /// <param name="other">Instance of CommentDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommentDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    AuthorId == other.AuthorId ||
                    AuthorId != null &&
                    AuthorId.Equals(other.AuthorId)
                ) && 
                (
                    Content == other.Content ||
                    Content != null &&
                    Content.Equals(other.Content)
                ) && 
                (
                    AvatarImage == other.AvatarImage ||
                    AvatarImage != null &&
                    AvatarImage.Equals(other.AvatarImage)
                ) && 
                (
                    Nickname == other.Nickname ||
                    Nickname != null &&
                    Nickname.Equals(other.Nickname)
                ) && 
                (
                    HasResponses == other.HasResponses ||
                    
                    HasResponses.Equals(other.HasResponses)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (AuthorId != null)
                    hashCode = hashCode * 59 + AuthorId.GetHashCode();
                    if (Content != null)
                    hashCode = hashCode * 59 + Content.GetHashCode();
                    if (AvatarImage != null)
                    hashCode = hashCode * 59 + AvatarImage.GetHashCode();
                    if (Nickname != null)
                    hashCode = hashCode * 59 + Nickname.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasResponses.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CommentDto left, CommentDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CommentDto left, CommentDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
