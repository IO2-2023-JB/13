/*
 * VideIO API
 *
 * VideIO project API specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using WideIO.API.Attributes;
using WideIO.API.Models;

namespace WideIO.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class VideoApiController : ControllerBase
    { 
        /// <summary>
        /// Video removal
        /// </summary>
        /// <param name="id">Video ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorised</response>
        /// <response code="404">Not found</response>
        [HttpDelete]
        [Route("/zagorskim/VideIO/1.0.0/video")]
        [ValidateModelState]
        [SwaggerOperation("DeleteVideo")]
        public virtual IActionResult DeleteVideo([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get user&#39;s video
        /// </summary>
        /// <param name="id">User ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/user/videos")]
        [ValidateModelState]
        [SwaggerOperation("GetUserVideos")]
        [SwaggerResponse(statusCode: 200, type: typeof(VideoListDto), description: "OK")]
        public virtual IActionResult GetUserVideos([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VideoListDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\r\n  \"subscriptions\" : [ {\r\n    \"thumbnail\" : \"https://example.com/thumbnail/video-id\",\r\n    \"description\" : \"I'll teach you how to wash your dishes! All you need is a sponge and dishwashing soap\",\r\n    \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n    \"viewCount\" : 1234503,\r\n    \"title\" : \"How to wash dishes\",\r\n    \"authorId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n    \"authorNickname\" : \"john.doe123\",\r\n    \"tags\" : [ \"tags\", \"tags\" ]\r\n  }, {\r\n    \"thumbnail\" : \"https://example.com/thumbnail/video-id\",\r\n    \"description\" : \"I'll teach you how to wash your dishes! All you need is a sponge and dishwashing soap\",\r\n    \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n    \"viewCount\" : 1234503,\r\n    \"title\" : \"How to wash dishes\",\r\n    \"authorId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n    \"authorNickname\" : \"john.doe123\",\r\n    \"tags\" : [ \"tags\", \"tags\" ]\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VideoListDto>(exampleJson)
            : default(VideoListDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Video metadata retreival
        /// </summary>
        /// <param name="id">Video ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorised</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/videoMetadata")]
        [ValidateModelState]
        [SwaggerOperation("GetVideoMetadata")]
        [SwaggerResponse(statusCode: 200, type: typeof(VideoMetadataDto), description: "OK")]
        public virtual IActionResult GetVideoMetadata([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VideoMetadataDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"thumbnail\" : \"https://example.com/thumbnail/video-id\",\r\n  \"description\" : \"I'll teach you how to wash your dishes! All you need is a sponge and dishwashing soap\",\r\n  \"id\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"viewCount\" : 1234503,\r\n  \"title\" : \"How to wash dishes\",\r\n  \"authorId\" : \"123e4567-e89b-12d3-a456-426614174000\",\r\n  \"authorNickname\" : \"john.doe123\",\r\n  \"tags\" : [ \"tags\", \"tags\" ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VideoMetadataDto>(exampleJson)
            : default(VideoMetadataDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Video reaction retreival
        /// </summary>
        /// <param name="id">Video ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/videoReaction")]
        [ValidateModelState]
        [SwaggerOperation("GetVideoReactions")]
        [SwaggerResponse(statusCode: 200, type: typeof(VideoReactionDto), description: "OK")]
        public virtual IActionResult GetVideoReactions([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VideoReactionDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\r\n  \"positiveCount\" : 0,\r\n  \"negativeCount\" : 6\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VideoReactionDto>(exampleJson)
            : default(VideoReactionDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Video stream retreival
        /// </summary>
        /// <param name="id">Video ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorised</response>
        /// <response code="404">Not found</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/video")]
        [ValidateModelState]
        [SwaggerOperation("GetVideoStream")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult GetVideoStream([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(string));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<string>(exampleJson)
            : default(string);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Video metadata update
        /// </summary>
        /// <param name="videoMetadataUpdateDto"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorised</response>
        /// <response code="404">Not found</response>
        [HttpPut]
        [Route("/zagorskim/VideIO/1.0.0/videoMetadata")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVideoMetadata")]
        public virtual IActionResult UpdateVideoMetadata([FromBody]VideoMetadataUpdateDto videoMetadataUpdateDto)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Video reaction update
        /// </summary>
        /// <param name="videoReactionUpdateDto"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorised</response>
        /// <response code="404">Not found</response>
        [HttpPost]
        [Route("/zagorskim/VideIO/1.0.0/videoReaction")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVideoReaction")]
        public virtual IActionResult UpdateVideoReaction([FromBody]VideoReactionUpdateDto videoReactionUpdateDto)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Video upload
        /// </summary>
        /// <param name="videoUploadDto"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorised</response>
        [HttpPost]
        [Route("/zagorskim/VideIO/1.0.0/video")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UploadVideo")]
        public virtual IActionResult UploadVideo([FromBody]VideoUploadDto videoUploadDto)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }
    }
}
