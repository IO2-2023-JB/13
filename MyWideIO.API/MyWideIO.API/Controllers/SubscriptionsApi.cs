/*
 * VideIO API
 *
 * VideIO project API specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using WideIO.API.Attributes;
using WideIO.API.Models;

namespace WideIO.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SubscriptionsApiController : ControllerBase
    { 
        /// <summary>
        /// Subscribe to another user
        /// </summary>
        /// <param name="id">User ID</param>
        /// <param name="subId">Subscribed user ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/zagorskim/VideIO/1.0.0/subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("AddSubscription")]
        public virtual IActionResult AddSubscription([FromQuery (Name = "id")][Required()]Guid id, [FromQuery (Name = "subId")][Required()]Guid subId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Unsubscribe from another user
        /// </summary>
        /// <param name="id">User ID</param>
        /// <param name="subId">Subscribed user ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpDelete]
        [Route("/zagorskim/VideIO/1.0.0/subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSubscription")]
        public virtual IActionResult DeleteSubscription([FromQuery (Name = "id")][Required()]Guid id, [FromQuery (Name = "subId")][Required()]Guid subId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a user&#39;s subscriptions
        /// </summary>
        /// <param name="id">User ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/subscriptions")]
        [ValidateModelState]
        [SwaggerOperation("GetSubscriptions")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserSubscriptionListDto), description: "OK")]
        public virtual IActionResult GetSubscriptions([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserSubscriptionListDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\r\n  \"subscriptions\" : [ \"123e4567-e89b-12d3-a456-426614174000\", \"123e4567-e89b-12d3-a456-426614174000\" ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserSubscriptionListDto>(exampleJson)
            : default(UserSubscriptionListDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
