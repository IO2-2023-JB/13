/*
 * VideIO API
 *
 * VideIO project API specification.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using WideIO.API.Attributes;
using WideIO.API.Models;

namespace WideIO.API.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CommentApiController : ControllerBase
    { 
        /// <summary>
        /// Add comment to video
        /// </summary>
        /// <param name="id">Video ID to which you add comment</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/zagorskim/VideIO/1.0.0/comment")]
        [Consumes("text/plain")]
        [ValidateModelState]
        [SwaggerOperation("AddCommentToVideo")]
        public virtual IActionResult AddCommentToVideo([FromQuery (Name = "id")][Required()]Guid id, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Add response to comment
        /// </summary>
        /// <param name="id">Comment ID to which you add response</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpPost]
        [Route("/zagorskim/VideIO/1.0.0/comment/response")]
        [Consumes("text/plain")]
        [ValidateModelState]
        [SwaggerOperation("AddResponseToComment")]
        public virtual IActionResult AddResponseToComment([FromQuery (Name = "id")][Required()]Guid id, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Comment removal
        /// </summary>
        /// <param name="id">Comment ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpDelete]
        [Route("/zagorskim/VideIO/1.0.0/comment")]
        [ValidateModelState]
        [SwaggerOperation("DeleteComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(CommentDto), description: "OK")]
        public virtual IActionResult DeleteComment([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CommentDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\r\n  \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"authorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n  \"content\" : \"This is an example comment.\"\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentDto>(exampleJson)
            : default(CommentDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all comments of video
        /// </summary>
        /// <param name="id">Video ID</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/comment")]
        [ValidateModelState]
        [SwaggerOperation("GetComments")]
        [SwaggerResponse(statusCode: 200, type: typeof(CommentListDto), description: "OK")]
        public virtual IActionResult GetComments([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CommentListDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\r\n  \"subscriptions\" : [ {\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"authorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"content\" : \"This is an example comment.\"\r\n  }, {\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"authorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"content\" : \"This is an example comment.\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentListDto>(exampleJson)
            : default(CommentListDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Response data
        /// </summary>
        /// <param name="id">Comment ID to which you add response</param>
        /// <response code="200">OK</response>
        /// <response code="400">Bad request</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/zagorskim/VideIO/1.0.0/comment/response")]
        [ValidateModelState]
        [SwaggerOperation("GetResponseData")]
        [SwaggerResponse(statusCode: 200, type: typeof(CommentListDto), description: "OK")]
        public virtual IActionResult GetResponseData([FromQuery (Name = "id")][Required()]Guid id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CommentListDto));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\r\n  \"subscriptions\" : [ {\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"authorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"content\" : \"This is an example comment.\"\r\n  }, {\r\n    \"id\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"authorId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\r\n    \"content\" : \"This is an example comment.\"\r\n  } ]\r\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<CommentListDto>(exampleJson)
            : default(CommentListDto);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
